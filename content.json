{"meta":{"title":"HanJin의 작업실","subtitle":"all about Data Science!","description":null,"author":"Hanjin Hwang","url":"https://hhj235.github.io"},"pages":[],"posts":[{"title":"Stack & Que","slug":"Stack-Que","date":"2018-06-03T07:10:33.000Z","updated":"2018-06-03T07:11:14.065Z","comments":true,"path":"2018/06/03/Stack-Que/","link":"","permalink":"https://hhj235.github.io/2018/06/03/Stack-Que/","excerpt":"","text":"Programming Study[1주차] 스택 &amp;큐(자료구조와 알고리즘) 1. Stack 1-1. Stack이란? 데이타 입/출력이 한쪽으로만 접근 할 수 있는 자료 구조 LIFO(Last In First Out) : 나중에 들어간 데이터가 제일 먼저 나옴 1-2. 스택의 동작 스택을 조작하는 동작은 Push 와 Pop 두가지로 나누어짐① Push : 데이터를 넣는 동작② Pop : 데이터를 빼오는 동작 1-3. Python에서의 Stack 구현 list를 통해 Push &amp; Pop을 구현 PUSH 1list.append() -&gt; append() Method를 사용하여 리스트 맨 뒤에 Data 추가 POP 1list.pop() -&gt; pop() Method를 사용하여 리스트 맨 뒤에 Data를 삭제 2. Que 2-1. Que란? 데이타 입/출력이 양쪽으로 접근 가능한 구조 FIFO(First In First Out): 먼저 들어간 데이터가 먼저 나오는 구조 (선입선출) Que를 조작하는 동작은 Put과 Get 두가지로 나누어짐① Put : 데이터를 넣는 동작② Get : 데이터를 빼오는 동작 1-2. Python에서의 Que 구현 list를 통해 Push &amp; Pop을 구현 (Stack과 유사!) PUT 1list.append() -&gt; append() Method를 사용하여 리스트 맨 뒤에 Data 추가 GET 1list.pop(0) -&gt; pop(0) Method를 사용하여 리스트 맨 앞에 Data를 삭제 list.pop()의 DocstringL.pop([index]) -&gt; item – remove and return item at index (default last)Raises IndexError if list is empty or index is out of range. 참고OneStep 님의 Tistory","categories":[],"tags":[{"name":"Programming","slug":"Programming","permalink":"https://hhj235.github.io/tags/Programming/"},{"name":"Today I learned","slug":"Today-I-learned","permalink":"https://hhj235.github.io/tags/Today-I-learned/"},{"name":"Stack","slug":"Stack","permalink":"https://hhj235.github.io/tags/Stack/"},{"name":"Que","slug":"Que","permalink":"https://hhj235.github.io/tags/Que/"},{"name":"Stack&Que","slug":"Stack-Que","permalink":"https://hhj235.github.io/tags/Stack-Que/"}]},{"title":"Mark-Down Syntax","slug":"markdown-syntax","date":"2018-06-03T07:06:19.000Z","updated":"2018-06-03T07:58:45.936Z","comments":true,"path":"2018/06/03/markdown-syntax/","link":"","permalink":"https://hhj235.github.io/2018/06/03/markdown-syntax/","excerpt":"","text":"1.마크 다운이란?Markdwn은 텍스트 기반의 마크업 언어로 매우 간단하게 사용 가능하며, HTML로 변환 가능하다. 마크 다운은 GitHub에서 사용되면서 최근 각광받기 시작했다. 2.마크다운 문법2.1. 헤더Headers 큰제목: 문서 제목 12This is an H1============= This is an H1 ============= 작은제목: 문서 부제목 12This is an H2------------- This is an H2 글머리: 1~6까지만 지원 123456# This is a H1## This is a H2### This is a H3#### This is a H4##### This is a H5###### This is a H6 This is a H1This is a H2This is a H3This is a H4This is a H5This is a H62.2. 인용구1&gt; 철수는 영희가 이쁘다고 말했다. 철수는 영희가 이쁘다고 말했다. 2.2. 리스트 순차표시 1231. 하나1. 둘1. 셋 하나 둘 셋 순차표시 없는 것 123* 홍길동* 김철수* 김영희 홍길동 김철수 김영희 2.3. 강조구문 진하게 표시(Bold) 1전 매우 **착하게** 살고 싶었습니다. 전 매우 착하게 살고 싶었습니다. 기울여 표시(Italic) 1전 매우 *착하게* 살고 싶었습니다. (또는 _착하게_) 전 매우 착하게 살고 싶었습니다. (또는 착하게) 2.4. 링크와 이미지링크문구로 작성 1[위키독스](http://wikidocs.net) 위키독스 이미지 링크인 경우 앞에 ! 만 추가 1![](/images/markdown-syntax/말랑이.jpg) 2.5. 강제 줄바꿈마크다운 에디터에서 엔터키를 이용하여 줄 바꿈을 하더라도 실제 보는 화면에서는 줄 바꿈이 되지 않음. 강제로 줄 바꿈을 하고 싶으면 줄 끝에 공백(space)을 두 개 추가.12첫번째 줄 두번째 줄 첫번째 줄두번째 줄 2.6. 코드블록코드블록은 프로그래밍 코드를 삽입할 경우 사용. 삽입된 코드는 보기 좋게(Syntax Highlighting) 표시됨 스페이스 코드블록 삽입하는 코드 앞에 스페이스 4개를 삽입하면 됨 (모든줄에 스페이스 4개 삽입해야 함) 스페이스 블록인 경우 코드의 구문을 체크하여 자동으로 신택스 하이라이팅을 함. (자동으로 해당 언어를 감지함.)12def sum(a, b):return a+b 12def sum(a, b):return a+b 언어지정 코드블록 123&#123;.python&#125;def sum(a, b):return a+b {.python} def sum(a, b): return a+b no-hilight 코드블록 123456&#123;.no-highlight&#125;class Test &#123; public static void main(String[] args) &#123; System.out.pritnln(&quot;hello world&quot;); &#125;&#125; {.no-highlight} class Test { public static void main(String[] args) { System.out.pritnln(“hello world”); } } 인라인 코드블록 주의사항 : 은 작은 따옴표가 아닌(키보드의 ~표시임)1프로그램 수행 중 `return a+b` 라는 문장을 만나면 결과값이 리턴됩니다. 프로그램 수행 중 return a+b 라는 문장을 만나면 결과값이 리턴됩니다. 2.7 마크다운 extension 테이블 1234head1 | head2------|-------hello | foohi | bar head1 head2 hello foo hi bar (※ 테이블 내에 파이프문자(|)를 표시하려면 &amp;#124;를 입력하면 됩니다.) 각주 (각주는 현재 잘 작동하지 않음… -&gt; 수정 필요!) 123에릭 레이먼드는 파이썬을 배운지 하루만에 원하는 프로그램을 작성할 수 있었다고 한다. [^myfootnote][^myfootnote]: 에릭 레이먼드는 프로그래밍 경험이 많은 구루 프로그래머이다. 보통 사람은 파이썬을 배우고 사용하는 데 1주일 정도의 적응 시간이 필요할 것이다. 에릭 레이먼드는 파이썬을 배운지 하루만에 원하는 프로그램을 작성할 수 있었다고 한다. [^myfootnote][^myfootnote]: 에릭 레이먼드는 프로그래밍 경험이 많은 구루 프로그래머이다. 보통 사람은 파이썬을 배우고 사용하는 데 1주일 정도의 적응 시간이 필요할 것이다. &gt; ※ 각주명(예:myfootnote)은 마음대로 명명할 수 있습니다. 참고ihoneymon님의 블로그위키독스","categories":[],"tags":[{"name":"Today I learned","slug":"Today-I-learned","permalink":"https://hhj235.github.io/tags/Today-I-learned/"},{"name":"Mark Down","slug":"Mark-Down","permalink":"https://hhj235.github.io/tags/Mark-Down/"}]},{"title":"[object Object]","slug":"make-a-blog-with-hexo","date":"2018-06-03T07:03:05.691Z","updated":"2018-06-07T02:36:24.496Z","comments":true,"path":"2018/06/03/make-a-blog-with-hexo/","link":"","permalink":"https://hhj235.github.io/2018/06/03/make-a-blog-with-hexo/","excerpt":"","text":"오늘부터 Hexo 블로그 시작합니다!Linux &amp; Github 수업을 듣고 HEXO라는 블로그가 있다는 강사님의 소개로 블로그를 개설하게 됬습니다.앞으로 Data Scientist로 성장해 나가며, 그날그날의 배운것들과 새로 알게된것들을 정리해보고자 합니다.그럼 첫번째 포스팅으로 HEXO에 대해서 이야기해보고자 합니다. HEXO란? Github를 이용한 정적인 블로그 프레임 워크→ 제 블로그 처럼 github.io로 끝나는 블로그는 github를 이용한 블로그입니다. Node.js 기반으로 만들어짐 Node.js를 안다면 커스터마이징이 매우 쉬움→ Node.js라는 과제가 하나 더 생겼네요… HEXO의 장점?엄청나게 빠른 속도! Node.js는 몇 초만에 수백개의 파일을 빌드할 수 있을 정도로 빠른 생성 속도를 제공합니다. Markdown 지원 친화적인 Markdown의 모든 기능을 지원하며 거의 모든 Octopress 플러그인들을 사용할 수 있습니다. ‘Octopress’는 좀더 공부한뒤에 다시 정리해보겠습니다. 한 번의 명령으로 Deployment 하기 단지 하나의 명령어로 당신의 웹 사이트를 GitHub나 Heroku에 deploy할 수 있습니다. 다양한 플러그인 Hexo는 강력한 플러그인 시스템을 가지고 있습니다. 사용자는 Jade와 CoffeeScript를 위한 플러그인들을 설치할 수도 있습니다. Hexo로 블로그 만들기!1. Github Repository 만들기 Hexo는 위에서 말씀드린대로, Github와 연동하여 동작하는 블로그입니다. 따라서 반드시 Github아이디가 팔요합니다. (Github 가입하기) Github 아이디를 만드셨다면, Blog 동작에 필요한 파일들과 포스팅한 자료들이 저장될 Repository를 만들어야 합니다. 이 때 주의할 점은 Repo명을 username.github.io의 형식으로만드셔야합니다.(예 : hhj235.github.io) 2. Hexo 설치하기 우선 Node.js를 설치하셔야 합니다. Node.js 설치 후 커맨드/터미널 창에 npm install -g hexo-cli를 입력해서 Hexo를 설치합니다. 3. Hexo 블로그 시작하기 앞에서 만들었던 Github Repository폴더(ex : hhj235.github.io 폴더)로 이동해주세요. 그다음 hexo init blog라고 입력합니다. -&gt; blog라는 하위 폴더가 생성됩니다. 만들어진 blog 폴더에 들어가 npm install을 입력해 줍니다.-&gt; node_modules 라는 폴더가 생성됩니다. 여기까지 진행하셨다면, hexo serve 명령어로 local 환경에서 블로그를 테스트 해 볼 수있습니다. 4. 포스트 작성 &amp; 배포 지금까지의 작업을 통해 일단 블로그 만들기의 절반은 성공했습니다! 다음은 글작성 -&gt; 배포 단계만 남아있습니다.① 포스트 작성하기 앞에서 생성된 블로그 폴더에서 hexo new post &#39;포스트명&#39;을 입력합니다.(hexo의 거의 모든 명령은 blog 폴더에서 진행된다고 생각하시면 됩니다.) 그러면 \\blog\\source\\_posts 폴더 안에 방금 입력하신 포스트명의 md확장자 파일이 생성됩니다.-&gt; ****.md 파일은 마크다운 문서로, 마크다운 문법은 이곳에서 확인 가능합니다. 이 파일을 Atom 등의 프로그램을 통해 편집하시면 됩니다. ② 배포할 주소 설정하기 우선 작성한 포스트가 배포되어질 주소를 적어야 합니다.(Github 에서의 commit과 비슷한 개념이라고 생각하시면 됩니다.) blog 폴더 안에 있는 _config.yml파일을 다음과 같은 형식으로 편집하시면 됩니다.(repo 안에 본인의 repo 주소를 적으면 됩니다.)③ 배포할 주소 설정하기 여기까지 입력하셨다면 blog 폴더 안에서 세가지 명령어를 순서대로 입력하시면 됩니다. hexo clean,hexo generate,hexo deploy(여기서 hexo depoy -g로 두가지 명령을 한꺼번에 입력 가능합니다.) 주의할 점은 Deploy 하더라도 변경점이 바로 반영되지는 않습니다.(딜레이가 있습니다.) 참고appear 님의 블로그","categories":[{"name":"Web","slug":"Web","permalink":"https://hhj235.github.io/categories/Web/"}],"tags":[{"name":"Today I learned","slug":"Today-I-learned","permalink":"https://hhj235.github.io/tags/Today-I-learned/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hhj235.github.io/tags/Hexo/"}]}]}